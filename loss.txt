class AdversarialLoss(nn.Module):
    """LSGAN对抗损失 """

    def __init__(self, discriminator: nn.Module, device: torch.device):
        super().__init__()
        self.discriminator = discriminator
        self.device = device
        self.mse_loss = nn.MSELoss()

    def generator_loss(self, fake_images: torch.Tensor) -> torch.Tensor:
        """生成器损失 - LSGAN: (D(fake) - 1)^2"""
        fake_scores = self.discriminator(fake_images)
        # LSGAN损失: 让判别器对生成图像的输出接近1
        target = torch.ones_like(fake_scores)
        loss = self.mse_loss(fake_scores, target)
        return loss

    def discriminator_loss(self, real_images: torch.Tensor, fake_images: torch.Tensor) -> torch.Tensor:
        """判别器损失 - LSGAN: (D(real) - 1)^2 + (D(fake))^2"""
        real_scores = self.discriminator(real_images)
        fake_scores = self.discriminator(fake_images.detach())

        real_target = torch.ones_like(real_scores)
        real_loss = self.mse_loss(real_scores, real_target)

        fake_target = torch.zeros_like(fake_scores)
        fake_loss = self.mse_loss(fake_scores, fake_target)

        total_loss = (real_loss + fake_loss) * 0.5
        return total_loss